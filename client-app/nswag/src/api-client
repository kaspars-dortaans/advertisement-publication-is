//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    user(body: DataTableQuery | undefined, cancelToken?: CancelToken): Promise<UserListItemDataTableQueryResponse> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: AxiosResponse): Promise<UserListItemDataTableQueryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserListItemDataTableQueryResponse.fromJS(resultData200);
            return Promise.resolve<UserListItemDataTableQueryResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserListItemDataTableQueryResponse>(null as any);
    }
}

export class DataTableQuery implements IDataTableQuery {
    draw?: number;
    start?: number | undefined;
    length?: number | undefined;
    search?: SearchQuery;
    order?: OrderQuery[] | undefined;
    columns?: TableColumn[] | undefined;

    constructor(data?: IDataTableQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.start = _data["start"];
            this.length = _data["length"];
            this.search = _data["search"] ? SearchQuery.fromJS(_data["search"]) : <any>undefined;
            if (Array.isArray(_data["order"])) {
                this.order = [] as any;
                for (let item of _data["order"])
                    this.order!.push(OrderQuery.fromJS(item));
            }
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(TableColumn.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataTableQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DataTableQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["start"] = this.start;
        data["length"] = this.length;
        data["search"] = this.search ? this.search.toJSON() : <any>undefined;
        if (Array.isArray(this.order)) {
            data["order"] = [];
            for (let item of this.order)
                data["order"].push(item.toJSON());
        }
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDataTableQuery {
    draw?: number;
    start?: number | undefined;
    length?: number | undefined;
    search?: SearchQuery;
    order?: OrderQuery[] | undefined;
    columns?: TableColumn[] | undefined;
}

export class LoginDto implements ILoginDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class OrderQuery implements IOrderQuery {
    column?: number;
    direction?: string | undefined;

    constructor(data?: IOrderQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.column = _data["column"];
            this.direction = _data["direction"];
        }
    }

    static fromJS(data: any): OrderQuery {
        data = typeof data === 'object' ? data : {};
        let result = new OrderQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["column"] = this.column;
        data["direction"] = this.direction;
        return data;
    }
}

export interface IOrderQuery {
    column?: number;
    direction?: string | undefined;
}

export class SearchQuery implements ISearchQuery {
    value?: string | undefined;
    regex?: boolean;

    constructor(data?: ISearchQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.regex = _data["regex"];
        }
    }

    static fromJS(data: any): SearchQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["regex"] = this.regex;
        return data;
    }
}

export interface ISearchQuery {
    value?: string | undefined;
    regex?: boolean;
}

export class TableColumn implements ITableColumn {
    data?: string | undefined;
    name?: string | undefined;
    searchable?: boolean;
    orderable?: boolean;
    search?: SearchQuery;

    constructor(data?: ITableColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.name = _data["name"];
            this.searchable = _data["searchable"];
            this.orderable = _data["orderable"];
            this.search = _data["search"] ? SearchQuery.fromJS(_data["search"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TableColumn {
        data = typeof data === 'object' ? data : {};
        let result = new TableColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["name"] = this.name;
        data["searchable"] = this.searchable;
        data["orderable"] = this.orderable;
        data["search"] = this.search ? this.search.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITableColumn {
    data?: string | undefined;
    name?: string | undefined;
    searchable?: boolean;
    orderable?: boolean;
    search?: SearchQuery;
}

export class UserListItem implements IUserListItem {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IUserListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UserListItem {
        data = typeof data === 'object' ? data : {};
        let result = new UserListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUserListItem {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export class UserListItemDataTableQueryResponse implements IUserListItemDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: UserListItem[] | undefined;
    error?: string | undefined;

    constructor(data?: IUserListItemDataTableQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.recordsTotal = _data["recordsTotal"];
            this.recordsFiltered = _data["recordsFiltered"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserListItem.fromJS(item));
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): UserListItemDataTableQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserListItemDataTableQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["recordsTotal"] = this.recordsTotal;
        data["recordsFiltered"] = this.recordsFiltered;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IUserListItemDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: UserListItem[] | undefined;
    error?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}