//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class AdvertisementClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAdvertisements(body: AdvertisementQuery | undefined, cancelToken?: CancelToken): Promise<AdvertisementListItemDataTableQueryResponse> {
        let url_ = this.baseUrl + "/api/Advertisement/GetAdvertisements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAdvertisements(_response);
        });
    }

    protected processGetAdvertisements(response: AxiosResponse): Promise<AdvertisementListItemDataTableQueryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AdvertisementListItemDataTableQueryResponse.fromJS(resultData200);
            return Promise.resolve<AdvertisementListItemDataTableQueryResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AdvertisementListItemDataTableQueryResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getBookmarkedAdvertisements(body: AdvertisementQuery | undefined, cancelToken?: CancelToken): Promise<AdvertisementListItemDataTableQueryResponse> {
        let url_ = this.baseUrl + "/api/Advertisement/GetBookmarkedAdvertisements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBookmarkedAdvertisements(_response);
        });
    }

    protected processGetBookmarkedAdvertisements(response: AxiosResponse): Promise<AdvertisementListItemDataTableQueryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AdvertisementListItemDataTableQueryResponse.fromJS(resultData200);
            return Promise.resolve<AdvertisementListItemDataTableQueryResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AdvertisementListItemDataTableQueryResponse>(null as any);
    }

    /**
     * @param advertisementId (optional) 
     * @return Success
     */
    getAdvertisement(advertisementId: number | undefined, cancelToken?: CancelToken): Promise<AdvertisementDto> {
        let url_ = this.baseUrl + "/api/Advertisement/GetAdvertisement?";
        if (advertisementId === null)
            throw new Error("The parameter 'advertisementId' cannot be null.");
        else if (advertisementId !== undefined)
            url_ += "advertisementId=" + encodeURIComponent("" + advertisementId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAdvertisement(_response);
        });
    }

    protected processGetAdvertisement(response: AxiosResponse): Promise<AdvertisementDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AdvertisementDto.fromJS(resultData200);
            return Promise.resolve<AdvertisementDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AdvertisementDto>(null as any);
    }

    /**
     * @param advertisementId (optional) 
     * @return Success
     */
    revealAdvertiserPhoneNumber(advertisementId: number | undefined, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Advertisement/RevealAdvertiserPhoneNumber?";
        if (advertisementId === null)
            throw new Error("The parameter 'advertisementId' cannot be null.");
        else if (advertisementId !== undefined)
            url_ += "advertisementId=" + encodeURIComponent("" + advertisementId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRevealAdvertiserPhoneNumber(_response);
        });
    }

    protected processRevealAdvertiserPhoneNumber(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ForbidResult.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param advertisementId (optional) 
     * @return Success
     */
    revealAdvertiserEmail(advertisementId: number | undefined, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Advertisement/RevealAdvertiserEmail?";
        if (advertisementId === null)
            throw new Error("The parameter 'advertisementId' cannot be null.");
        else if (advertisementId !== undefined)
            url_ += "advertisementId=" + encodeURIComponent("" + advertisementId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRevealAdvertiserEmail(_response);
        });
    }

    protected processRevealAdvertiserEmail(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ForbidResult.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    bookmarkAdvertisement(body: BookmarkAdvertisementRequest | undefined, cancelToken?: CancelToken): Promise<PublicUserInfoDto> {
        let url_ = this.baseUrl + "/api/Advertisement/BookmarkAdvertisement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBookmarkAdvertisement(_response);
        });
    }

    protected processBookmarkAdvertisement(response: AxiosResponse): Promise<PublicUserInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PublicUserInfoDto.fromJS(resultData200);
            return Promise.resolve<PublicUserInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicUserInfoDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    removeAdvertisementBookmarks(body: number[] | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Advertisement/RemoveAdvertisementBookmarks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveAdvertisementBookmarks(_response);
        });
    }

    protected processRemoveAdvertisementBookmarks(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getCategories( cancelToken?: CancelToken): Promise<CategoryItem[]> {
        let url_ = this.baseUrl + "/api/Advertisement/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCategories(_response);
        });
    }

    protected processGetCategories(response: AxiosResponse): Promise<CategoryItem[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CategoryItem[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryItem[]>(null as any);
    }

    /**
     * @param categoryId (optional) 
     * @return Success
     */
    getCategoryInfo(categoryId: number | undefined, cancelToken?: CancelToken): Promise<CategoryInfo> {
        let url_ = this.baseUrl + "/api/Advertisement/GetCategoryInfo?";
        if (categoryId === null)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else if (categoryId !== undefined)
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCategoryInfo(_response);
        });
    }

    protected processGetCategoryInfo(response: AxiosResponse): Promise<CategoryInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CategoryInfo.fromJS(resultData200);
            return Promise.resolve<CategoryInfo>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryInfo>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getCategoryListFromAdvertisementIds(body: number[] | undefined, cancelToken?: CancelToken): Promise<Int32StringKeyValuePair[]> {
        let url_ = this.baseUrl + "/api/Advertisement/GetCategoryListFromAdvertisementIds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCategoryListFromAdvertisementIds(_response);
        });
    }

    protected processGetCategoryListFromAdvertisementIds(response: AxiosResponse): Promise<Int32StringKeyValuePair[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Int32StringKeyValuePair.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Int32StringKeyValuePair[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Int32StringKeyValuePair[]>(null as any);
    }

    /**
     * @return Success
     */
    getBookmarkedAdvertisementCategoryList( cancelToken?: CancelToken): Promise<Int32StringKeyValuePair[]> {
        let url_ = this.baseUrl + "/api/Advertisement/GetBookmarkedAdvertisementCategoryList";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBookmarkedAdvertisementCategoryList(_response);
        });
    }

    protected processGetBookmarkedAdvertisementCategoryList(response: AxiosResponse): Promise<Int32StringKeyValuePair[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Int32StringKeyValuePair.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Int32StringKeyValuePair[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Int32StringKeyValuePair[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reportAdvertisement(body: ReportAdvertisementRequest | undefined, cancelToken?: CancelToken): Promise<PublicUserInfoDto> {
        let url_ = this.baseUrl + "/api/Advertisement/ReportAdvertisement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportAdvertisement(_response);
        });
    }

    protected processReportAdvertisement(response: AxiosResponse): Promise<PublicUserInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PublicUserInfoDto.fromJS(resultData200);
            return Promise.resolve<PublicUserInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicUserInfoDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getOwnedAdvertisements(body: DataTableQuery | undefined, cancelToken?: CancelToken): Promise<AdvertisementInfoDataTableQueryResponse> {
        let url_ = this.baseUrl + "/api/Advertisement/GetOwnedAdvertisements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOwnedAdvertisements(_response);
        });
    }

    protected processGetOwnedAdvertisements(response: AxiosResponse): Promise<AdvertisementInfoDataTableQueryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AdvertisementInfoDataTableQueryResponse.fromJS(resultData200);
            return Promise.resolve<AdvertisementInfoDataTableQueryResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AdvertisementInfoDataTableQueryResponse>(null as any);
    }

    /**
     * @param isActive (optional) 
     * @param body (optional) 
     * @return Success
     */
    setIsActiveAdvertisements(isActive: boolean | undefined, body: number[] | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Advertisement/SetIsActiveAdvertisements?";
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += "isActive=" + encodeURIComponent("" + isActive) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetIsActiveAdvertisements(_response);
        });
    }

    protected processSetIsActiveAdvertisements(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteAdvertisements(body: number[] | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Advertisement/DeleteAdvertisements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAdvertisements(_response);
        });
    }

    protected processDeleteAdvertisements(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param categoryId (optional) 
     * @param attributeValues (optional) 
     * @param postDayCount (optional) 
     * @param title (optional) 
     * @param description (optional) 
     * @param thumbnailImageHash (optional) 
     * @param imagesToAdd (optional) 
     * @param imageIdsToDelete (optional) 
     * @return Success
     */
    createAdvertisement(id: number | null | undefined, categoryId: number | undefined, attributeValues: Int32StringKeyValuePair[] | null | undefined, postDayCount: number | undefined, title: string | undefined, description: string | undefined, thumbnailImageHash: string | null | undefined, imagesToAdd: FileParameter[] | null | undefined, imageIdsToDelete: number[] | null | undefined, cancelToken?: CancelToken): Promise<PublicUserInfoDto> {
        let url_ = this.baseUrl + "/api/Advertisement/CreateAdvertisement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id !== null && id !== undefined)
            content_.append("id", id.toString());
        if (categoryId === null || categoryId === undefined)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else
            content_.append("categoryId", categoryId.toString());
        if (attributeValues !== null && attributeValues !== undefined)
            attributeValues.forEach((item_, i) => {
                content_.append("attributeValues[" + i + "].key", "" + item_.key)
                content_.append("attributeValues[" + i + "].value", "" + item_.value)
            });
        if (postDayCount === null || postDayCount === undefined)
            throw new Error("The parameter 'postDayCount' cannot be null.");
        else
            content_.append("postDayCount", postDayCount.toString());
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("title", title.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("description", description.toString());
        if (thumbnailImageHash !== null && thumbnailImageHash !== undefined)
            content_.append("thumbnailImageHash", thumbnailImageHash.toString());
        if (imagesToAdd !== null && imagesToAdd !== undefined)
            imagesToAdd.forEach(item_ => content_.append("imagesToAdd", item_.data, item_.fileName ? item_.fileName : "imagesToAdd") );
        if (imageIdsToDelete !== null && imageIdsToDelete !== undefined)
            imageIdsToDelete.forEach(item_ => content_.append("imageIdsToDelete", item_.toString()));

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateAdvertisement(_response);
        });
    }

    protected processCreateAdvertisement(response: AxiosResponse): Promise<PublicUserInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PublicUserInfoDto.fromJS(resultData200);
            return Promise.resolve<PublicUserInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicUserInfoDto>(null as any);
    }

    /**
     * @param categoryId (optional) 
     * @return Success
     */
    getCategoryFormInfo(categoryId: number | undefined, cancelToken?: CancelToken): Promise<CategoryFormInfo> {
        let url_ = this.baseUrl + "/api/Advertisement/GetCategoryFormInfo?";
        if (categoryId === null)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else if (categoryId !== undefined)
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCategoryFormInfo(_response);
        });
    }

    protected processGetCategoryFormInfo(response: AxiosResponse): Promise<CategoryFormInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CategoryFormInfo.fromJS(resultData200);
            return Promise.resolve<CategoryFormInfo>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryFormInfo>(null as any);
    }
}

export class FileClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param id (optional) 
     * @param getThumbnail (optional) 
     * @return Success
     */
    getFile(id: number | undefined, getThumbnail: boolean | undefined, cancelToken?: CancelToken): Promise<FileResponse> {
        let url_ = this.baseUrl + "/File/GetFile?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (getThumbnail === null)
            throw new Error("The parameter 'getThumbnail' cannot be null.");
        else if (getThumbnail !== undefined)
            url_ += "getThumbnail=" + encodeURIComponent("" + getThumbnail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFile(_response);
        });
    }

    protected processGetFile(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = NotFoundResult.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ForbidResult.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class UserClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    authenticate(body: LoginDto | undefined, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/User/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getUserList(body: DataTableQuery | undefined, cancelToken?: CancelToken): Promise<UserListItemDataTableQueryResponse> {
        let url_ = this.baseUrl + "/api/User/GetUserList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserList(_response);
        });
    }

    protected processGetUserList(response: AxiosResponse): Promise<UserListItemDataTableQueryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserListItemDataTableQueryResponse.fromJS(resultData200);
            return Promise.resolve<UserListItemDataTableQueryResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserListItemDataTableQueryResponse>(null as any);
    }

    /**
     * @param email (optional) 
     * @param isEmailPublic (optional) 
     * @param password (optional) 
     * @param passwordConfirmation (optional) 
     * @param firstName (optional) 
     * @param lastName (optional) 
     * @param userName (optional) 
     * @param phoneNumber (optional) 
     * @param isPhoneNumberPublic (optional) 
     * @param profileImage (optional) 
     * @return Success
     */
    register(email: string | undefined, isEmailPublic: boolean | undefined, password: string | undefined, passwordConfirmation: string | undefined, firstName: string | undefined, lastName: string | undefined, userName: string | undefined, phoneNumber: string | undefined, isPhoneNumberPublic: boolean | undefined, profileImage: FileParameter | null | undefined, cancelToken?: CancelToken): Promise<OkResult> {
        let url_ = this.baseUrl + "/api/User/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (email === null || email === undefined)
            throw new Error("The parameter 'email' cannot be null.");
        else
            content_.append("email", email.toString());
        if (isEmailPublic === null || isEmailPublic === undefined)
            throw new Error("The parameter 'isEmailPublic' cannot be null.");
        else
            content_.append("isEmailPublic", isEmailPublic.toString());
        if (password === null || password === undefined)
            throw new Error("The parameter 'password' cannot be null.");
        else
            content_.append("password", password.toString());
        if (passwordConfirmation === null || passwordConfirmation === undefined)
            throw new Error("The parameter 'passwordConfirmation' cannot be null.");
        else
            content_.append("passwordConfirmation", passwordConfirmation.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("firstName", firstName.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("lastName", lastName.toString());
        if (userName === null || userName === undefined)
            throw new Error("The parameter 'userName' cannot be null.");
        else
            content_.append("userName", userName.toString());
        if (phoneNumber === null || phoneNumber === undefined)
            throw new Error("The parameter 'phoneNumber' cannot be null.");
        else
            content_.append("phoneNumber", phoneNumber.toString());
        if (isPhoneNumberPublic === null || isPhoneNumberPublic === undefined)
            throw new Error("The parameter 'isPhoneNumberPublic' cannot be null.");
        else
            content_.append("isPhoneNumberPublic", isPhoneNumberPublic.toString());
        if (profileImage !== null && profileImage !== undefined)
            content_.append("profileImage", profileImage.data, profileImage.fileName ? profileImage.fileName : "profileImage");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<OkResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OkResult.fromJS(resultData200);
            return Promise.resolve<OkResult>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OkResult>(null as any);
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    getPublicUserInfo(userId: number | undefined, cancelToken?: CancelToken): Promise<PublicUserInfoDto> {
        let url_ = this.baseUrl + "/api/User/GetPublicUserInfo?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPublicUserInfo(_response);
        });
    }

    protected processGetPublicUserInfo(response: AxiosResponse): Promise<PublicUserInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PublicUserInfoDto.fromJS(resultData200);
            return Promise.resolve<PublicUserInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicUserInfoDto>(null as any);
    }

    /**
     * @return Success
     */
    getUserInfo( cancelToken?: CancelToken): Promise<UserInfo> {
        let url_ = this.baseUrl + "/api/User/GetUserInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserInfo(_response);
        });
    }

    protected processGetUserInfo(response: AxiosResponse): Promise<UserInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserInfo.fromJS(resultData200);
            return Promise.resolve<UserInfo>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserInfo>(null as any);
    }

    /**
     * @param email (optional) 
     * @param isEmailPublic (optional) 
     * @param firstName (optional) 
     * @param lastName (optional) 
     * @param userName (optional) 
     * @param phoneNumber (optional) 
     * @param isPhoneNumberPublic (optional) 
     * @param linkToUserSite (optional) 
     * @param profileImageChanged (optional) 
     * @param profileImage (optional) 
     * @return Success
     */
    updateUserInfo(email: string | undefined, isEmailPublic: boolean | undefined, firstName: string | undefined, lastName: string | undefined, userName: string | undefined, phoneNumber: string | undefined, isPhoneNumberPublic: boolean | undefined, linkToUserSite: string | null | undefined, profileImageChanged: boolean | undefined, profileImage: FileParameter | null | undefined, cancelToken?: CancelToken): Promise<OkResult> {
        let url_ = this.baseUrl + "/api/User/UpdateUserInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (email === null || email === undefined)
            throw new Error("The parameter 'email' cannot be null.");
        else
            content_.append("email", email.toString());
        if (isEmailPublic === null || isEmailPublic === undefined)
            throw new Error("The parameter 'isEmailPublic' cannot be null.");
        else
            content_.append("isEmailPublic", isEmailPublic.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("firstName", firstName.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("lastName", lastName.toString());
        if (userName === null || userName === undefined)
            throw new Error("The parameter 'userName' cannot be null.");
        else
            content_.append("userName", userName.toString());
        if (phoneNumber === null || phoneNumber === undefined)
            throw new Error("The parameter 'phoneNumber' cannot be null.");
        else
            content_.append("phoneNumber", phoneNumber.toString());
        if (isPhoneNumberPublic === null || isPhoneNumberPublic === undefined)
            throw new Error("The parameter 'isPhoneNumberPublic' cannot be null.");
        else
            content_.append("isPhoneNumberPublic", isPhoneNumberPublic.toString());
        if (linkToUserSite !== null && linkToUserSite !== undefined)
            content_.append("linkToUserSite", linkToUserSite.toString());
        if (profileImageChanged === null || profileImageChanged === undefined)
            throw new Error("The parameter 'profileImageChanged' cannot be null.");
        else
            content_.append("profileImageChanged", profileImageChanged.toString());
        if (profileImage !== null && profileImage !== undefined)
            content_.append("profileImage", profileImage.data, profileImage.fileName ? profileImage.fileName : "profileImage");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserInfo(_response);
        });
    }

    protected processUpdateUserInfo(response: AxiosResponse): Promise<OkResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OkResult.fromJS(resultData200);
            return Promise.resolve<OkResult>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OkResult>(null as any);
    }

    /**
     * @return Success
     */
    getCurrentUserPermissions( cancelToken?: CancelToken): Promise<string[]> {
        let url_ = this.baseUrl + "/api/User/GetCurrentUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentUserPermissions(_response);
        });
    }

    protected processGetCurrentUserPermissions(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined, cancelToken?: CancelToken): Promise<OkResult> {
        let url_ = this.baseUrl + "/api/User/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<OkResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OkResult.fromJS(resultData200);
            return Promise.resolve<OkResult>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = RequestExceptionResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OkResult>(null as any);
    }
}

export class AdvertisementDto implements IAdvertisementDto {
    categoryId?: number;
    id?: number;
    title?: string | undefined;
    advertisementText?: string | undefined;
    postedDate?: Date;
    viewCount?: number;
    isBookmarked?: boolean | undefined;
    attributes?: AttributeValueItem[] | undefined;
    imageURLs?: ImageUrl[] | undefined;
    ownerId?: number;
    maskedAdvertiserPhoneNumber?: string | undefined;
    maskedAdvertiserEmail?: string | undefined;

    constructor(data?: IAdvertisementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.id = _data["id"];
            this.title = _data["title"];
            this.advertisementText = _data["advertisementText"];
            this.postedDate = _data["postedDate"] ? new Date(_data["postedDate"].toString()) : <any>undefined;
            this.viewCount = _data["viewCount"];
            this.isBookmarked = _data["isBookmarked"];
            if (Array.isArray(_data["attributes"])) {
                this.attributes = [] as any;
                for (let item of _data["attributes"])
                    this.attributes!.push(AttributeValueItem.fromJS(item));
            }
            if (Array.isArray(_data["imageURLs"])) {
                this.imageURLs = [] as any;
                for (let item of _data["imageURLs"])
                    this.imageURLs!.push(ImageUrl.fromJS(item));
            }
            this.ownerId = _data["ownerId"];
            this.maskedAdvertiserPhoneNumber = _data["maskedAdvertiserPhoneNumber"];
            this.maskedAdvertiserEmail = _data["maskedAdvertiserEmail"];
        }
    }

    static fromJS(data: any): AdvertisementDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertisementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["id"] = this.id;
        data["title"] = this.title;
        data["advertisementText"] = this.advertisementText;
        data["postedDate"] = this.postedDate ? this.postedDate.toISOString() : <any>undefined;
        data["viewCount"] = this.viewCount;
        data["isBookmarked"] = this.isBookmarked;
        if (Array.isArray(this.attributes)) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        if (Array.isArray(this.imageURLs)) {
            data["imageURLs"] = [];
            for (let item of this.imageURLs)
                data["imageURLs"].push(item.toJSON());
        }
        data["ownerId"] = this.ownerId;
        data["maskedAdvertiserPhoneNumber"] = this.maskedAdvertiserPhoneNumber;
        data["maskedAdvertiserEmail"] = this.maskedAdvertiserEmail;
        return data;
    }
}

export interface IAdvertisementDto {
    categoryId?: number;
    id?: number;
    title?: string | undefined;
    advertisementText?: string | undefined;
    postedDate?: Date;
    viewCount?: number;
    isBookmarked?: boolean | undefined;
    attributes?: AttributeValueItem[] | undefined;
    imageURLs?: ImageUrl[] | undefined;
    ownerId?: number;
    maskedAdvertiserPhoneNumber?: string | undefined;
    maskedAdvertiserEmail?: string | undefined;
}

export class AdvertisementInfo implements IAdvertisementInfo {
    id?: number;
    title?: string | undefined;
    categoryName?: string | undefined;
    isActive?: boolean;
    validTo?: Date;
    createdAt?: Date;

    constructor(data?: IAdvertisementInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.categoryName = _data["categoryName"];
            this.isActive = _data["isActive"];
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AdvertisementInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertisementInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["categoryName"] = this.categoryName;
        data["isActive"] = this.isActive;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAdvertisementInfo {
    id?: number;
    title?: string | undefined;
    categoryName?: string | undefined;
    isActive?: boolean;
    validTo?: Date;
    createdAt?: Date;
}

export class AdvertisementInfoDataTableQueryResponse implements IAdvertisementInfoDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: AdvertisementInfo[] | undefined;
    error?: string | undefined;

    constructor(data?: IAdvertisementInfoDataTableQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.recordsTotal = _data["recordsTotal"];
            this.recordsFiltered = _data["recordsFiltered"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AdvertisementInfo.fromJS(item));
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): AdvertisementInfoDataTableQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertisementInfoDataTableQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["recordsTotal"] = this.recordsTotal;
        data["recordsFiltered"] = this.recordsFiltered;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IAdvertisementInfoDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: AdvertisementInfo[] | undefined;
    error?: string | undefined;
}

export class AdvertisementListItem implements IAdvertisementListItem {
    id?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    postedDate?: Date;
    title?: string | undefined;
    advertisementText?: string | undefined;
    thumbnailImageUrl?: string | undefined;
    attributeValues?: AttributeValueItem[] | undefined;

    constructor(data?: IAdvertisementListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.postedDate = _data["postedDate"] ? new Date(_data["postedDate"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.advertisementText = _data["advertisementText"];
            this.thumbnailImageUrl = _data["thumbnailImageUrl"];
            if (Array.isArray(_data["attributeValues"])) {
                this.attributeValues = [] as any;
                for (let item of _data["attributeValues"])
                    this.attributeValues!.push(AttributeValueItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AdvertisementListItem {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertisementListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["postedDate"] = this.postedDate ? this.postedDate.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["advertisementText"] = this.advertisementText;
        data["thumbnailImageUrl"] = this.thumbnailImageUrl;
        if (Array.isArray(this.attributeValues)) {
            data["attributeValues"] = [];
            for (let item of this.attributeValues)
                data["attributeValues"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAdvertisementListItem {
    id?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    postedDate?: Date;
    title?: string | undefined;
    advertisementText?: string | undefined;
    thumbnailImageUrl?: string | undefined;
    attributeValues?: AttributeValueItem[] | undefined;
}

export class AdvertisementListItemDataTableQueryResponse implements IAdvertisementListItemDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: AdvertisementListItem[] | undefined;
    error?: string | undefined;

    constructor(data?: IAdvertisementListItemDataTableQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.recordsTotal = _data["recordsTotal"];
            this.recordsFiltered = _data["recordsFiltered"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AdvertisementListItem.fromJS(item));
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): AdvertisementListItemDataTableQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertisementListItemDataTableQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["recordsTotal"] = this.recordsTotal;
        data["recordsFiltered"] = this.recordsFiltered;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IAdvertisementListItemDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: AdvertisementListItem[] | undefined;
    error?: string | undefined;
}

export class AdvertisementQuery implements IAdvertisementQuery {
    draw?: number;
    start?: number | undefined;
    length?: number | undefined;
    search?: SearchQuery;
    order?: OrderQuery[] | undefined;
    columns?: TableColumn[] | undefined;
    categoryId?: number | undefined;
    advertisementOwnerId?: number | undefined;
    advertisementIds?: number[] | undefined;
    attributeSearch?: AttributeSearchQuery[] | undefined;
    attributeOrder?: AttributeOrderQuery[] | undefined;

    constructor(data?: IAdvertisementQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.start = _data["start"];
            this.length = _data["length"];
            this.search = _data["search"] ? SearchQuery.fromJS(_data["search"]) : <any>undefined;
            if (Array.isArray(_data["order"])) {
                this.order = [] as any;
                for (let item of _data["order"])
                    this.order!.push(OrderQuery.fromJS(item));
            }
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(TableColumn.fromJS(item));
            }
            this.categoryId = _data["categoryId"];
            this.advertisementOwnerId = _data["advertisementOwnerId"];
            if (Array.isArray(_data["advertisementIds"])) {
                this.advertisementIds = [] as any;
                for (let item of _data["advertisementIds"])
                    this.advertisementIds!.push(item);
            }
            if (Array.isArray(_data["attributeSearch"])) {
                this.attributeSearch = [] as any;
                for (let item of _data["attributeSearch"])
                    this.attributeSearch!.push(AttributeSearchQuery.fromJS(item));
            }
            if (Array.isArray(_data["attributeOrder"])) {
                this.attributeOrder = [] as any;
                for (let item of _data["attributeOrder"])
                    this.attributeOrder!.push(AttributeOrderQuery.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AdvertisementQuery {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertisementQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["start"] = this.start;
        data["length"] = this.length;
        data["search"] = this.search ? this.search.toJSON() : <any>undefined;
        if (Array.isArray(this.order)) {
            data["order"] = [];
            for (let item of this.order)
                data["order"].push(item.toJSON());
        }
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        data["categoryId"] = this.categoryId;
        data["advertisementOwnerId"] = this.advertisementOwnerId;
        if (Array.isArray(this.advertisementIds)) {
            data["advertisementIds"] = [];
            for (let item of this.advertisementIds)
                data["advertisementIds"].push(item);
        }
        if (Array.isArray(this.attributeSearch)) {
            data["attributeSearch"] = [];
            for (let item of this.attributeSearch)
                data["attributeSearch"].push(item.toJSON());
        }
        if (Array.isArray(this.attributeOrder)) {
            data["attributeOrder"] = [];
            for (let item of this.attributeOrder)
                data["attributeOrder"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAdvertisementQuery {
    draw?: number;
    start?: number | undefined;
    length?: number | undefined;
    search?: SearchQuery;
    order?: OrderQuery[] | undefined;
    columns?: TableColumn[] | undefined;
    categoryId?: number | undefined;
    advertisementOwnerId?: number | undefined;
    advertisementIds?: number[] | undefined;
    attributeSearch?: AttributeSearchQuery[] | undefined;
    attributeOrder?: AttributeOrderQuery[] | undefined;
}

export class AttributeFormInfo implements IAttributeFormInfo {
    id?: number;
    name?: string | undefined;
    order?: number;
    valueValidationRegex?: string | undefined;
    valueListId?: number | undefined;
    iconUrl?: string | undefined;
    attributeValueType?: ValueTypes;

    constructor(data?: IAttributeFormInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.order = _data["order"];
            this.valueValidationRegex = _data["valueValidationRegex"];
            this.valueListId = _data["valueListId"];
            this.iconUrl = _data["iconUrl"];
            this.attributeValueType = _data["attributeValueType"];
        }
    }

    static fromJS(data: any): AttributeFormInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeFormInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["order"] = this.order;
        data["valueValidationRegex"] = this.valueValidationRegex;
        data["valueListId"] = this.valueListId;
        data["iconUrl"] = this.iconUrl;
        data["attributeValueType"] = this.attributeValueType;
        return data;
    }
}

export interface IAttributeFormInfo {
    id?: number;
    name?: string | undefined;
    order?: number;
    valueValidationRegex?: string | undefined;
    valueListId?: number | undefined;
    iconUrl?: string | undefined;
    attributeValueType?: ValueTypes;
}

export class AttributeOrderQuery implements IAttributeOrderQuery {
    attributeId!: number;
    direction!: string;

    constructor(data?: IAttributeOrderQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attributeId = _data["attributeId"];
            this.direction = _data["direction"];
        }
    }

    static fromJS(data: any): AttributeOrderQuery {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeOrderQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeId"] = this.attributeId;
        data["direction"] = this.direction;
        return data;
    }
}

export interface IAttributeOrderQuery {
    attributeId: number;
    direction: string;
}

export class AttributeSearchQuery implements IAttributeSearchQuery {
    attributeId!: number;
    value?: string | undefined;
    secondaryValue?: string | undefined;

    constructor(data?: IAttributeSearchQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attributeId = _data["attributeId"];
            this.value = _data["value"];
            this.secondaryValue = _data["secondaryValue"];
        }
    }

    static fromJS(data: any): AttributeSearchQuery {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeSearchQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeId"] = this.attributeId;
        data["value"] = this.value;
        data["secondaryValue"] = this.secondaryValue;
        return data;
    }
}

export interface IAttributeSearchQuery {
    attributeId: number;
    value?: string | undefined;
    secondaryValue?: string | undefined;
}

export class AttributeValueItem implements IAttributeValueItem {
    attributeId?: number;
    attributeName?: string | undefined;
    value?: string | undefined;
    valueName?: string | undefined;

    constructor(data?: IAttributeValueItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attributeId = _data["attributeId"];
            this.attributeName = _data["attributeName"];
            this.value = _data["value"];
            this.valueName = _data["valueName"];
        }
    }

    static fromJS(data: any): AttributeValueItem {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeValueItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeId"] = this.attributeId;
        data["attributeName"] = this.attributeName;
        data["value"] = this.value;
        data["valueName"] = this.valueName;
        return data;
    }
}

export interface IAttributeValueItem {
    attributeId?: number;
    attributeName?: string | undefined;
    value?: string | undefined;
    valueName?: string | undefined;
}

export class AttributeValueListEntryItem implements IAttributeValueListEntryItem {
    id?: number;
    name?: string | undefined;
    orderIndex?: number;

    constructor(data?: IAttributeValueListEntryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.orderIndex = _data["orderIndex"];
        }
    }

    static fromJS(data: any): AttributeValueListEntryItem {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeValueListEntryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["orderIndex"] = this.orderIndex;
        return data;
    }
}

export interface IAttributeValueListEntryItem {
    id?: number;
    name?: string | undefined;
    orderIndex?: number;
}

export class AttributeValueListItem implements IAttributeValueListItem {
    id?: number;
    name?: string | undefined;
    entries?: AttributeValueListEntryItem[] | undefined;

    constructor(data?: IAttributeValueListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(AttributeValueListEntryItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AttributeValueListItem {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeValueListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAttributeValueListItem {
    id?: number;
    name?: string | undefined;
    entries?: AttributeValueListEntryItem[] | undefined;
}

export class AuthenticationProperties implements IAuthenticationProperties {
    items?: { [key: string]: string; } | undefined;

    constructor(data?: IAuthenticationProperties) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["items"]) {
                this.items = {} as any;
                for (let key in _data["items"]) {
                    if (_data["items"].hasOwnProperty(key))
                        (<any>this.items)![key] = _data["items"][key];
                }
            }
        }
    }

    static fromJS(data: any): AuthenticationProperties {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationProperties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items) {
            data["items"] = {};
            for (let key in this.items) {
                if (this.items.hasOwnProperty(key))
                    (<any>data["items"])[key] = (<any>this.items)[key];
            }
        }
        return data;
    }
}

export interface IAuthenticationProperties {
    items?: { [key: string]: string; } | undefined;
}

export class BookmarkAdvertisementRequest implements IBookmarkAdvertisementRequest {
    advertisementId!: number;
    addBookmark!: boolean;

    constructor(data?: IBookmarkAdvertisementRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.advertisementId = _data["advertisementId"];
            this.addBookmark = _data["addBookmark"];
        }
    }

    static fromJS(data: any): BookmarkAdvertisementRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BookmarkAdvertisementRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["advertisementId"] = this.advertisementId;
        data["addBookmark"] = this.addBookmark;
        return data;
    }
}

export interface IBookmarkAdvertisementRequest {
    advertisementId: number;
    addBookmark: boolean;
}

export class CategoryAttributeInfo implements ICategoryAttributeInfo {
    id?: number;
    name?: string | undefined;
    sortable?: boolean;
    searchable?: boolean;
    order?: number;
    valueListId?: number | undefined;
    iconUrl?: string | undefined;
    attributeValueType?: ValueTypes;
    attributeFilterType?: FilterType;

    constructor(data?: ICategoryAttributeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.sortable = _data["sortable"];
            this.searchable = _data["searchable"];
            this.order = _data["order"];
            this.valueListId = _data["valueListId"];
            this.iconUrl = _data["iconUrl"];
            this.attributeValueType = _data["attributeValueType"];
            this.attributeFilterType = _data["attributeFilterType"];
        }
    }

    static fromJS(data: any): CategoryAttributeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryAttributeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sortable"] = this.sortable;
        data["searchable"] = this.searchable;
        data["order"] = this.order;
        data["valueListId"] = this.valueListId;
        data["iconUrl"] = this.iconUrl;
        data["attributeValueType"] = this.attributeValueType;
        data["attributeFilterType"] = this.attributeFilterType;
        return data;
    }
}

export interface ICategoryAttributeInfo {
    id?: number;
    name?: string | undefined;
    sortable?: boolean;
    searchable?: boolean;
    order?: number;
    valueListId?: number | undefined;
    iconUrl?: string | undefined;
    attributeValueType?: ValueTypes;
    attributeFilterType?: FilterType;
}

export class CategoryFormInfo implements ICategoryFormInfo {
    attributeInfo?: AttributeFormInfo[] | undefined;
    attributeValueLists?: AttributeValueListItem[] | undefined;

    constructor(data?: ICategoryFormInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["attributeInfo"])) {
                this.attributeInfo = [] as any;
                for (let item of _data["attributeInfo"])
                    this.attributeInfo!.push(AttributeFormInfo.fromJS(item));
            }
            if (Array.isArray(_data["attributeValueLists"])) {
                this.attributeValueLists = [] as any;
                for (let item of _data["attributeValueLists"])
                    this.attributeValueLists!.push(AttributeValueListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryFormInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryFormInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attributeInfo)) {
            data["attributeInfo"] = [];
            for (let item of this.attributeInfo)
                data["attributeInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.attributeValueLists)) {
            data["attributeValueLists"] = [];
            for (let item of this.attributeValueLists)
                data["attributeValueLists"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICategoryFormInfo {
    attributeInfo?: AttributeFormInfo[] | undefined;
    attributeValueLists?: AttributeValueListItem[] | undefined;
}

export class CategoryInfo implements ICategoryInfo {
    categoryName?: string | undefined;
    attributeInfo?: CategoryAttributeInfo[] | undefined;
    attributeValueLists?: AttributeValueListItem[] | undefined;

    constructor(data?: ICategoryInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryName = _data["categoryName"];
            if (Array.isArray(_data["attributeInfo"])) {
                this.attributeInfo = [] as any;
                for (let item of _data["attributeInfo"])
                    this.attributeInfo!.push(CategoryAttributeInfo.fromJS(item));
            }
            if (Array.isArray(_data["attributeValueLists"])) {
                this.attributeValueLists = [] as any;
                for (let item of _data["attributeValueLists"])
                    this.attributeValueLists!.push(AttributeValueListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        if (Array.isArray(this.attributeInfo)) {
            data["attributeInfo"] = [];
            for (let item of this.attributeInfo)
                data["attributeInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.attributeValueLists)) {
            data["attributeValueLists"] = [];
            for (let item of this.attributeValueLists)
                data["attributeValueLists"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICategoryInfo {
    categoryName?: string | undefined;
    attributeInfo?: CategoryAttributeInfo[] | undefined;
    attributeValueLists?: AttributeValueListItem[] | undefined;
}

export class CategoryItem implements ICategoryItem {
    id?: number;
    name?: string | undefined;
    canContainAdvertisements?: boolean;
    parentCategoryId?: number | undefined;
    advertisementCount?: number | undefined;

    constructor(data?: ICategoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canContainAdvertisements = _data["canContainAdvertisements"];
            this.parentCategoryId = _data["parentCategoryId"];
            this.advertisementCount = _data["advertisementCount"];
        }
    }

    static fromJS(data: any): CategoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canContainAdvertisements"] = this.canContainAdvertisements;
        data["parentCategoryId"] = this.parentCategoryId;
        data["advertisementCount"] = this.advertisementCount;
        return data;
    }
}

export interface ICategoryItem {
    id?: number;
    name?: string | undefined;
    canContainAdvertisements?: boolean;
    parentCategoryId?: number | undefined;
    advertisementCount?: number | undefined;
}

export class ChangePasswordRequest implements IChangePasswordRequest {
    currentPassword!: string;
    password!: string;
    confirmPassword!: string;

    constructor(data?: IChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }
}

export interface IChangePasswordRequest {
    currentPassword: string;
    password: string;
    confirmPassword: string;
}

export class CreateOrEditAdvertisementRequest implements ICreateOrEditAdvertisementRequest {
    id?: number | undefined;
    categoryId!: number;
    attributeValues?: Int32StringKeyValuePair[] | undefined;
    postDayCount!: number;
    title!: string;
    description!: string;
    thumbnailImageHash?: string | undefined;
    imagesToAdd?: any[] | undefined;
    imageIdsToDelete?: number[] | undefined;

    constructor(data?: ICreateOrEditAdvertisementRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryId = _data["categoryId"];
            if (Array.isArray(_data["attributeValues"])) {
                this.attributeValues = [] as any;
                for (let item of _data["attributeValues"])
                    this.attributeValues!.push(Int32StringKeyValuePair.fromJS(item));
            }
            this.postDayCount = _data["postDayCount"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.thumbnailImageHash = _data["thumbnailImageHash"];
            if (Array.isArray(_data["imagesToAdd"])) {
                this.imagesToAdd = [] as any;
                for (let item of _data["imagesToAdd"])
                    this.imagesToAdd!.push(item);
            }
            if (Array.isArray(_data["imageIdsToDelete"])) {
                this.imageIdsToDelete = [] as any;
                for (let item of _data["imageIdsToDelete"])
                    this.imageIdsToDelete!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrEditAdvertisementRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditAdvertisementRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        if (Array.isArray(this.attributeValues)) {
            data["attributeValues"] = [];
            for (let item of this.attributeValues)
                data["attributeValues"].push(item.toJSON());
        }
        data["postDayCount"] = this.postDayCount;
        data["title"] = this.title;
        data["description"] = this.description;
        data["thumbnailImageHash"] = this.thumbnailImageHash;
        if (Array.isArray(this.imagesToAdd)) {
            data["imagesToAdd"] = [];
            for (let item of this.imagesToAdd)
                data["imagesToAdd"].push(item);
        }
        if (Array.isArray(this.imageIdsToDelete)) {
            data["imageIdsToDelete"] = [];
            for (let item of this.imageIdsToDelete)
                data["imageIdsToDelete"].push(item);
        }
        return data;
    }
}

export interface ICreateOrEditAdvertisementRequest {
    id?: number | undefined;
    categoryId: number;
    attributeValues?: Int32StringKeyValuePair[] | undefined;
    postDayCount: number;
    title: string;
    description: string;
    thumbnailImageHash?: string | undefined;
    imagesToAdd?: any[] | undefined;
    imageIdsToDelete?: number[] | undefined;
}

export class DataTableQuery implements IDataTableQuery {
    draw?: number;
    start?: number | undefined;
    length?: number | undefined;
    search?: SearchQuery;
    order?: OrderQuery[] | undefined;
    columns?: TableColumn[] | undefined;

    constructor(data?: IDataTableQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.start = _data["start"];
            this.length = _data["length"];
            this.search = _data["search"] ? SearchQuery.fromJS(_data["search"]) : <any>undefined;
            if (Array.isArray(_data["order"])) {
                this.order = [] as any;
                for (let item of _data["order"])
                    this.order!.push(OrderQuery.fromJS(item));
            }
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(TableColumn.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataTableQuery {
        data = typeof data === 'object' ? data : {};
        let result = new DataTableQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["start"] = this.start;
        data["length"] = this.length;
        data["search"] = this.search ? this.search.toJSON() : <any>undefined;
        if (Array.isArray(this.order)) {
            data["order"] = [];
            for (let item of this.order)
                data["order"].push(item.toJSON());
        }
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDataTableQuery {
    draw?: number;
    start?: number | undefined;
    length?: number | undefined;
    search?: SearchQuery;
    order?: OrderQuery[] | undefined;
    columns?: TableColumn[] | undefined;
}

export class DataTableQueryResponse_1 implements IDataTableQueryResponse_1 {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: T[] | undefined;
    error?: string | undefined;

    constructor(data?: IDataTableQueryResponse_1) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.recordsTotal = _data["recordsTotal"];
            this.recordsFiltered = _data["recordsFiltered"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(T.fromJS(item));
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): DataTableQueryResponse_1 {
        data = typeof data === 'object' ? data : {};
        let result = new DataTableQueryResponse_1();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["recordsTotal"] = this.recordsTotal;
        data["recordsFiltered"] = this.recordsFiltered;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IDataTableQueryResponse_1 {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: T[] | undefined;
    error?: string | undefined;
}

export class EditUserInfo implements IEditUserInfo {
    email!: string;
    isEmailPublic?: boolean;
    firstName!: string;
    lastName!: string;
    userName!: string;
    phoneNumber!: string;
    isPhoneNumberPublic?: boolean;
    linkToUserSite?: string | undefined;
    profileImageChanged?: boolean;
    profileImage?: any | undefined;

    constructor(data?: IEditUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.isEmailPublic = _data["isEmailPublic"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.isPhoneNumberPublic = _data["isPhoneNumberPublic"];
            this.linkToUserSite = _data["linkToUserSite"];
            this.profileImageChanged = _data["profileImageChanged"];
            this.profileImage = _data["profileImage"];
        }
    }

    static fromJS(data: any): EditUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EditUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["isEmailPublic"] = this.isEmailPublic;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberPublic"] = this.isPhoneNumberPublic;
        data["linkToUserSite"] = this.linkToUserSite;
        data["profileImageChanged"] = this.profileImageChanged;
        data["profileImage"] = this.profileImage;
        return data;
    }
}

export interface IEditUserInfo {
    email: string;
    isEmailPublic?: boolean;
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string;
    isPhoneNumberPublic?: boolean;
    linkToUserSite?: string | undefined;
    profileImageChanged?: boolean;
    profileImage?: any | undefined;
}

export enum FilterType {
    Search = "Search",
    FromTo = "FromTo",
    Match = "Match",
}

export class ForbidResult implements IForbidResult {
    authenticationSchemes?: string[] | undefined;
    properties?: AuthenticationProperties;

    constructor(data?: IForbidResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["authenticationSchemes"])) {
                this.authenticationSchemes = [] as any;
                for (let item of _data["authenticationSchemes"])
                    this.authenticationSchemes!.push(item);
            }
            this.properties = _data["properties"] ? AuthenticationProperties.fromJS(_data["properties"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ForbidResult {
        data = typeof data === 'object' ? data : {};
        let result = new ForbidResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.authenticationSchemes)) {
            data["authenticationSchemes"] = [];
            for (let item of this.authenticationSchemes)
                data["authenticationSchemes"].push(item);
        }
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForbidResult {
    authenticationSchemes?: string[] | undefined;
    properties?: AuthenticationProperties;
}

export class ImageDto implements IImageDto {
    id?: number;
    imageURLs?: ImageUrl;
    hash?: string | undefined;

    constructor(data?: IImageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imageURLs = _data["imageURLs"] ? ImageUrl.fromJS(_data["imageURLs"]) : <any>undefined;
            this.hash = _data["hash"];
        }
    }

    static fromJS(data: any): ImageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageURLs"] = this.imageURLs ? this.imageURLs.toJSON() : <any>undefined;
        data["hash"] = this.hash;
        return data;
    }
}

export interface IImageDto {
    id?: number;
    imageURLs?: ImageUrl;
    hash?: string | undefined;
}

export class ImageUrl implements IImageUrl {
    url?: string | undefined;
    thumbnailUrl?: string | undefined;

    constructor(data?: IImageUrl) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.thumbnailUrl = _data["thumbnailUrl"];
        }
    }

    static fromJS(data: any): ImageUrl {
        data = typeof data === 'object' ? data : {};
        let result = new ImageUrl();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["thumbnailUrl"] = this.thumbnailUrl;
        return data;
    }
}

export interface IImageUrl {
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
}

export class Int32StringKeyValuePair implements IInt32StringKeyValuePair {
    key?: number;
    value?: string | undefined;

    constructor(data?: IInt32StringKeyValuePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Int32StringKeyValuePair {
        data = typeof data === 'object' ? data : {};
        let result = new Int32StringKeyValuePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IInt32StringKeyValuePair {
    key?: number;
    value?: string | undefined;
}

export class LoginDto implements ILoginDto {
    email!: string;
    password!: string;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    email: string;
    password: string;
}

export class NotFoundResult implements INotFoundResult {
    statusCode?: number;

    constructor(data?: INotFoundResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): NotFoundResult {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface INotFoundResult {
    statusCode?: number;
}

export class OkResult implements IOkResult {
    statusCode?: number;

    constructor(data?: IOkResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): OkResult {
        data = typeof data === 'object' ? data : {};
        let result = new OkResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IOkResult {
    statusCode?: number;
}

export class OrderQuery implements IOrderQuery {
    column?: number;
    direction?: string | undefined;

    constructor(data?: IOrderQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.column = _data["column"];
            this.direction = _data["direction"];
        }
    }

    static fromJS(data: any): OrderQuery {
        data = typeof data === 'object' ? data : {};
        let result = new OrderQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["column"] = this.column;
        data["direction"] = this.direction;
        return data;
    }
}

export interface IOrderQuery {
    column?: number;
    direction?: string | undefined;
}

export class PublicUserInfoDto implements IPublicUserInfoDto {
    id?: number;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    linkToUserSite?: string | undefined;
    profileImageUrl?: string | undefined;

    constructor(data?: IPublicUserInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.linkToUserSite = _data["linkToUserSite"];
            this.profileImageUrl = _data["profileImageUrl"];
        }
    }

    static fromJS(data: any): PublicUserInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PublicUserInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["linkToUserSite"] = this.linkToUserSite;
        data["profileImageUrl"] = this.profileImageUrl;
        return data;
    }
}

export interface IPublicUserInfoDto {
    id?: number;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    linkToUserSite?: string | undefined;
    profileImageUrl?: string | undefined;
}

export class RegisterDto implements IRegisterDto {
    email!: string;
    isEmailPublic?: boolean;
    password!: string;
    passwordConfirmation!: string;
    firstName!: string;
    lastName!: string;
    userName!: string;
    phoneNumber!: string;
    isPhoneNumberPublic?: boolean;
    profileImage?: any | undefined;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.isEmailPublic = _data["isEmailPublic"];
            this.password = _data["password"];
            this.passwordConfirmation = _data["passwordConfirmation"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.isPhoneNumberPublic = _data["isPhoneNumberPublic"];
            this.profileImage = _data["profileImage"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["isEmailPublic"] = this.isEmailPublic;
        data["password"] = this.password;
        data["passwordConfirmation"] = this.passwordConfirmation;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberPublic"] = this.isPhoneNumberPublic;
        data["profileImage"] = this.profileImage;
        return data;
    }
}

export interface IRegisterDto {
    email: string;
    isEmailPublic?: boolean;
    password: string;
    passwordConfirmation: string;
    firstName: string;
    lastName: string;
    userName: string;
    phoneNumber: string;
    isPhoneNumberPublic?: boolean;
    profileImage?: any | undefined;
}

export class ReportAdvertisementRequest implements IReportAdvertisementRequest {
    description!: string;
    reportedAdvertisementId!: number;

    constructor(data?: IReportAdvertisementRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.reportedAdvertisementId = _data["reportedAdvertisementId"];
        }
    }

    static fromJS(data: any): ReportAdvertisementRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ReportAdvertisementRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["reportedAdvertisementId"] = this.reportedAdvertisementId;
        return data;
    }
}

export interface IReportAdvertisementRequest {
    description: string;
    reportedAdvertisementId: number;
}

export class RequestExceptionResponse implements IRequestExceptionResponse {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;
    errorCodes?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IRequestExceptionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
            if (Array.isArray(_data["errorCodes"])) {
                this.errorCodes = [] as any;
                for (let item of _data["errorCodes"])
                    this.errorCodes!.push(item);
            }
        }
    }

    static fromJS(data: any): RequestExceptionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RequestExceptionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        if (Array.isArray(this.errorCodes)) {
            data["errorCodes"] = [];
            for (let item of this.errorCodes)
                data["errorCodes"].push(item);
        }
        return data;
    }
}

export interface IRequestExceptionResponse {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;
    errorCodes?: string[] | undefined;

    [key: string]: any;
}

export class SearchQuery implements ISearchQuery {
    value?: string | undefined;
    regex?: boolean;

    constructor(data?: ISearchQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.regex = _data["regex"];
        }
    }

    static fromJS(data: any): SearchQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["regex"] = this.regex;
        return data;
    }
}

export interface ISearchQuery {
    value?: string | undefined;
    regex?: boolean;
}

export class T implements IT {

    constructor(data?: IT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): T {
        data = typeof data === 'object' ? data : {};
        let result = new T();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IT {
}

export class TableColumn implements ITableColumn {
    data?: string | undefined;
    name?: string | undefined;
    searchable?: boolean;
    orderable?: boolean;
    search?: SearchQuery;

    constructor(data?: ITableColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.name = _data["name"];
            this.searchable = _data["searchable"];
            this.orderable = _data["orderable"];
            this.search = _data["search"] ? SearchQuery.fromJS(_data["search"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TableColumn {
        data = typeof data === 'object' ? data : {};
        let result = new TableColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["name"] = this.name;
        data["searchable"] = this.searchable;
        data["orderable"] = this.orderable;
        data["search"] = this.search ? this.search.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITableColumn {
    data?: string | undefined;
    name?: string | undefined;
    searchable?: boolean;
    orderable?: boolean;
    search?: SearchQuery;
}

export class UserInfo implements IUserInfo {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    isPhoneNumberPublic?: boolean;
    phoneNumber?: string | undefined;
    isEmailPublic?: boolean;
    email?: string | undefined;
    linkToUserSite?: string | undefined;
    profileImage?: ImageDto;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.isPhoneNumberPublic = _data["isPhoneNumberPublic"];
            this.phoneNumber = _data["phoneNumber"];
            this.isEmailPublic = _data["isEmailPublic"];
            this.email = _data["email"];
            this.linkToUserSite = _data["linkToUserSite"];
            this.profileImage = _data["profileImage"] ? ImageDto.fromJS(_data["profileImage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["isPhoneNumberPublic"] = this.isPhoneNumberPublic;
        data["phoneNumber"] = this.phoneNumber;
        data["isEmailPublic"] = this.isEmailPublic;
        data["email"] = this.email;
        data["linkToUserSite"] = this.linkToUserSite;
        data["profileImage"] = this.profileImage ? this.profileImage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserInfo {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    isPhoneNumberPublic?: boolean;
    phoneNumber?: string | undefined;
    isEmailPublic?: boolean;
    email?: string | undefined;
    linkToUserSite?: string | undefined;
    profileImage?: ImageDto;
}

export class UserListItem implements IUserListItem {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IUserListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UserListItem {
        data = typeof data === 'object' ? data : {};
        let result = new UserListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUserListItem {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export class UserListItemDataTableQueryResponse implements IUserListItemDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: UserListItem[] | undefined;
    error?: string | undefined;

    constructor(data?: IUserListItemDataTableQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.draw = _data["draw"];
            this.recordsTotal = _data["recordsTotal"];
            this.recordsFiltered = _data["recordsFiltered"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserListItem.fromJS(item));
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): UserListItemDataTableQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserListItemDataTableQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draw"] = this.draw;
        data["recordsTotal"] = this.recordsTotal;
        data["recordsFiltered"] = this.recordsFiltered;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IUserListItemDataTableQueryResponse {
    draw?: number;
    recordsTotal?: number;
    recordsFiltered?: number;
    data?: UserListItem[] | undefined;
    error?: string | undefined;
}

export enum ValueTypes {
    Text = "Text",
    Integer = "Integer",
    Decimal = "Decimal",
    ValueListEntry = "ValueListEntry",
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}